<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Yizhao He's Notes]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://1mhz.me/"/>
  <updated>2015-10-21T22:56:05.000Z</updated>
  <id>http://1mhz.me/</id>
  
  <author>
    <name><![CDATA[Yizhao He]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Leetcode In JS #121 Best Time To Buy And Sell Stock]]></title>
    <link href="http://1mhz.me/2015/leetcode-in-js-121-best-time-to-buy-and-sell-stock/"/>
    <id>http://1mhz.me/2015/leetcode-in-js-121-best-time-to-buy-and-sell-stock/</id>
    <published>2015-10-21T17:30:33.000Z</published>
    <updated>2015-10-21T22:56:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Problem_Description">Problem Description</h1><blockquote>
<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
</blockquote>
<a id="more"></a>
<h1 id="Analysis">Analysis</h1><h2 id="Idea_1">Idea 1</h2><p>When I saw this problem, my first thought was to go through all of the prices and find the min and max in O(n) time and compute the maximum profit with (max - min).</p>
<p>However, this idea is wrong. Let’s see the following graph.</p>
<p><img src="http://7xnlp7.com1.z0.glb.clouddn.com/121-stock%20prices.png-small" alt="sotck prices"></p>
<p>The min and max of this sotck price graph is min2 and max1. But (max1 - min2) is not what we want since we can’t sell a stock before buy it(max1 is before min2).</p>
<h2 id="Idea_2">Idea 2</h2><p>Then I try to solve it using Dynamic Programming.</p>
<p>Let OPT(i, k) denotes the maximum we get at day k if we buy the stock at day i.</p>
<p>Let $P_i$ denotes the price of stock at day i.</p>
<p>Let optTal denotes the maximum we get.</p>
<p>Then we have:</p>

$
OPT(i, k) = 
\begin{cases}
	OPT(i, k - 1) & \text{not sell at day k} \\ 
	P_k - P_i & \text{sell at day k}
\end{cases}
$

<p>and the optimal:</p>

$
\begin{align}
	optTotal = max\{OPT(i, j)\} \\
	1 \le i \le n \\
	i \le j \le n 
\end{align}
$

<p>With this formula, we can calculate the correct answer in $O(n^2)$ time.</p>
<p>However, this solution is not efficient and will exceed the time limit of LeetcodeOJ.</p>
<h2 id="Idea_3">Idea 3</h2><p>We can go through all of the prices and update the min. Compute the profit we can get at day i by calculate ($P_i$ - min), update the max if we get a higher profit.</p>
<p>The complexity is O(n).</p>
<p>This solution works great!</p>
<h1 id="Solution">Solution</h1><h2 id="Dynamic_Programming_Version_1(not_good)">Dynamic Programming Version 1(not good)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * @param &#123;number[]&#125; prices</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> * Brute force version with complextity of O(n^2).</span><br><span class="line"> * NOTICE!: Will exceed time limt.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = prices.length,</span><br><span class="line">        opt = [],</span><br><span class="line">        optBuyAtI = [];</span><br><span class="line">        optTotal = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length === <span class="number">0</span> || length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        opt[i] = [];</span><br><span class="line">        opt[i][i] = <span class="built_in">Math</span>.max(prices[i] - prices[i - <span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">        optBuyAtI[i] = opt[i][i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt;= length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            opt[i][j] = <span class="built_in">Math</span>.max(opt[i][j - <span class="number">1</span>], prices[j] - prices[i]);</span><br><span class="line">            optBuyAtI[i] = <span class="built_in">Math</span>.max(opt[i][j], optBuyAtI[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        optTotal = <span class="built_in">Math</span>.max(optBuyAtI[i], optTotal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> optTotal;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Dynamic_Programming_Version_2_(good)">Dynamic Programming Version 2 (good)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * @param &#123;number[]&#125; prices</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> * More like greedy. Reserve the partial optimal and replace it when</span><br><span class="line"> * a better result is found.</span><br><span class="line"> * With complextity of O(n)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span> (<span class="params">prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = prices.length,</span><br><span class="line">        min = <span class="literal">Infinity</span>,</span><br><span class="line">        res = -<span class="literal">Infinity</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &lt; min) &#123;</span><br><span class="line">            min = prices[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prices[i] &gt; min &amp;&amp; prices[i] - min &gt; res) &#123;</span><br><span class="line">            res = prices[i] - min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isFinite</span>(res)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Problem_Description">Problem Description</h1><blockquote>
<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://1mhz.me/tags/Algorithm/"/>
    
      <category term="Dynamic Programming" scheme="http://1mhz.me/tags/Dynamic-Programming/"/>
    
      <category term="JavaScript" scheme="http://1mhz.me/tags/JavaScript/"/>
    
      <category term="Leetcode" scheme="http://1mhz.me/tags/Leetcode/"/>
    
      <category term="Leetcode In JS" scheme="http://1mhz.me/categories/Leetcode-In-JS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Leetcode In JS #213 House Robber II]]></title>
    <link href="http://1mhz.me/2015/leetcode-in-js-213-house-robber-II/"/>
    <id>http://1mhz.me/2015/leetcode-in-js-213-house-robber-II/</id>
    <published>2015-10-20T17:32:12.000Z</published>
    <updated>2015-10-21T17:52:29.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Problem_Description">Problem Description</h1><blockquote>
<p>After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>
</blockquote>
<a id="more"></a>
<h1 id="Analysis">Analysis</h1><p>Dynamic Programming problem.</p>
<p>Since the houses are arranged in circle, we should take the first house and the last house specially. Because if we rob the first one, we can’t rob the last one since it’s the neighbor of the first one.</p>
<p>So there are only two special cases:</p>
<ol>
<li>rob the first one, don’t rob the last one</li>
<li>rob the last one, don’t rob the first one</li>
</ol>
<p>For case 1, the problem turns into a #198 House Robber problem of 1 … n-1 houses.</p>
<p>For case 2, the problem turns into a #198 House Robber problem of 2 … n houses.</p>
<p>Compute the maximum amount of both cases and return the larger one.</p>
<h2 id="Recursive_Formula">Recursive Formula</h2><p>For n houses, let OPT(n) denotes the maximum amount we can rob, let Vi denotes the money that the ith house holds.</p>
<p>For the nth house, we have two cases, rob or not rob.</p>
<ol>
<li>rob： OPT(n) = Vn + OPT(n - 2)</li>
<li>not rob： OPT(n) = OPT(n - 1)</li>
</ol>
<p>It means that if we rob the nth house, we can only rob the (n-2)th house next, if we don’t rob the nth house, then we can rob the (n-1)th house next.</p>
<h2 id="Initialization">Initialization</h2><p>n means the total number of houses.</p>
<ol>
<li>n = 0，total amount we can rob is 0</li>
<li>n = 1，total amount equals to the money the first house holds</li>
<li>n = 2，total amount equals to the larger amount of the first and the second house holds</li>
</ol>
<h1 id="Solution">Solution</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * @param &#123;number[]&#125; nums</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span></span><br><span class="line">var rob = function(nums) &#123;</span><br><span class="line">    var length = nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var opt1 = [],</span><br><span class="line">    opt2 = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 to n-1</span></span><br><span class="line">    opt1[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    opt1[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (var i = <span class="number">2</span>; i &lt;= length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        opt1[i] = Math.max(nums[i] + opt1[i - <span class="number">2</span>], opt1[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 to n</span></span><br><span class="line">    opt2[<span class="number">1</span>] = nums[<span class="number">1</span>];</span><br><span class="line">    opt2[<span class="number">2</span>] = Math.max(nums[<span class="number">1</span>], nums[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span> (var j = <span class="number">3</span>; j &lt;= length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        opt2[j] = Math.max(nums[j] + opt2[j - <span class="number">2</span>], opt2[j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Math.max(opt1[length - <span class="number">2</span>], opt2[length - <span class="number">1</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Problem_Description">Problem Description</h1><blockquote>
<p>After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://1mhz.me/tags/Algorithm/"/>
    
      <category term="Dynamic Programming" scheme="http://1mhz.me/tags/Dynamic-Programming/"/>
    
      <category term="JavaScript" scheme="http://1mhz.me/tags/JavaScript/"/>
    
      <category term="Leetcode" scheme="http://1mhz.me/tags/Leetcode/"/>
    
      <category term="Leetcode In JS" scheme="http://1mhz.me/categories/Leetcode-In-JS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo 部署到 Github Pages 文件夹大小写问题]]></title>
    <link href="http://1mhz.me/2015/hexo-deploy-case-sensitive/"/>
    <id>http://1mhz.me/2015/hexo-deploy-case-sensitive/</id>
    <published>2015-10-18T01:54:09.000Z</published>
    <updated>2015-10-18T02:16:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="问题">问题</h1><p>使用 Hexo 部署博客到 Github Pages 时经常会遇到文件夹大小写问题导致的 404问题。</p>
<p>譬如 Hexo 生成了一个 <code>Hackerrank in JS</code> Category文件夹，但是我后来把它改成了  <code>Hackerrank In JS</code>，即 in 的首字母大写了。Hexo会生成正确，但部署到 Github 上却老是不正确。</p>
<h1 id="原因">原因</h1><p>git 默认忽略文件名大小写，所以即使文件夹大小写变更，git 也检测不到。</p>
<a id="more"></a>
<h1 id="解决办法">解决办法</h1><ul>
<li>进入到博客项目中 <code>.deploy_git</code>文件夹，修改 <code>.git</code> 下的 <code>config</code> 文件，将 <code>ignorecase=true</code> 改为 <code>ignorecase=false</code> </li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="class">.deploy_git</span></span><br><span class="line">vim .git/config</span><br></pre></td></tr></table></figure>
<p><img src="http://7xnlp7.com1.z0.glb.clouddn.com/hexo-deploy.png-small" alt="config"></p>
<ul>
<li>删除博客项目中 <code>.deploy_git</code> 文件夹下的所有文件，并 push 到 Github 上, 这一步是清空你的 github.io 项目中所有文件。</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">rm</span> -rf *</span><br><span class="line">git commit -<span class="keyword">m</span> 'clean all <span class="keyword">file</span>'</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 Hexo 再次生成及部署</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ..</span><br><span class="line">hexo clean</span><br><span class="line">hexo deploy -<span class="keyword">generate</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="问题">问题</h1><p>使用 Hexo 部署博客到 Github Pages 时经常会遇到文件夹大小写问题导致的 404问题。</p>
<p>譬如 Hexo 生成了一个 <code>Hackerrank in JS</code> Category文件夹，但是我后来把它改成了  <code>Hackerrank In JS</code>，即 in 的首字母大写了。Hexo会生成正确，但部署到 Github 上却老是不正确。</p>
<h1 id="原因">原因</h1><p>git 默认忽略文件名大小写，所以即使文件夹大小写变更，git 也检测不到。</p>]]>
    
    </summary>
    
      <category term="Git" scheme="http://1mhz.me/tags/Git/"/>
    
      <category term="Hexo" scheme="http://1mhz.me/tags/Hexo/"/>
    
      <category term="Hexo" scheme="http://1mhz.me/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Leetcode In JS #198 House Robber]]></title>
    <link href="http://1mhz.me/2015/leetcode-in-js-198-house-robber/"/>
    <id>http://1mhz.me/2015/leetcode-in-js-198-house-robber/</id>
    <published>2015-10-18T00:37:28.000Z</published>
    <updated>2015-10-21T17:54:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Problem_Description">Problem Description</h1><blockquote>
<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p>
</blockquote>
<a id="more"></a>
<h1 id="Analysis">Analysis</h1><p>Dynamic Programming problem.</p>
<h2 id="Recursive_Formula">Recursive Formula</h2><p>For n houses, let OPT(n) denotes the maximum amount we can rob, let Vi denotes the money that the ith house holds.</p>
<p>For the nth house, we have two cases, rob or not rob.</p>
<ol>
<li>rob： OPT(n) = Vn + OPT(n - 2)</li>
<li>not rob： OPT(n) = OPT(n - 1)</li>
</ol>
<p>It means that if we rob the nth house, we can only rob the (n-2)th house next, if we don’t rob the nth house, then we can rob the (n-1)th house next.</p>
<h2 id="Initialization">Initialization</h2><p>n means the total number of houses.</p>
<ol>
<li>n = 0，total amount we can rob is 0</li>
<li>n = 1，total amount equals to the money the first house holds</li>
<li>n = 2，total amount equals to the larger amount of the first and the second house holds</li>
</ol>
<h1 id="Solution">Solution</h1><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="constant">@param</span> &#123;<span class="built_in">number</span>[]&#125; nums</span><br><span class="line"> * <span class="constant">@return</span> &#123;<span class="built_in">number</span>&#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function rob(nums) &#123;</span><br><span class="line">    var length = nums.length<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var <span class="built_in">opt</span> = []<span class="comment">;</span></span><br><span class="line">    <span class="built_in">opt</span>[<span class="number">0</span>] = nums[<span class="number">0</span>],</span><br><span class="line">    <span class="built_in">opt</span>[<span class="number">1</span>] = Math.<span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>])<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (var i = <span class="number">2</span><span class="comment">; i &lt; length; i++) &#123;</span></span><br><span class="line">        <span class="built_in">opt</span>[i] = Math.<span class="built_in">max</span>(nums[i] + <span class="built_in">opt</span>[i - <span class="number">2</span>], <span class="built_in">opt</span>[i - <span class="number">1</span>])<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">opt</span>[length - <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Problem_Description">Problem Description</h1><blockquote>
<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://1mhz.me/tags/Algorithm/"/>
    
      <category term="Dynamic Programming" scheme="http://1mhz.me/tags/Dynamic-Programming/"/>
    
      <category term="JavaScript" scheme="http://1mhz.me/tags/JavaScript/"/>
    
      <category term="Leetcode" scheme="http://1mhz.me/tags/Leetcode/"/>
    
      <category term="Leetcode In JS" scheme="http://1mhz.me/categories/Leetcode-In-JS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Leetcode In JS #70 Climb Stairs]]></title>
    <link href="http://1mhz.me/2015/leetcode-in-js-70-climb-stairs/"/>
    <id>http://1mhz.me/2015/leetcode-in-js-70-climb-stairs/</id>
    <published>2015-10-17T22:38:29.000Z</published>
    <updated>2015-10-21T17:57:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Problem_Description">Problem Description</h1><blockquote>
<p>You are climbing a stair case. It takes n steps to reach to the top.</p>
<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
</blockquote>
<a id="more"></a>
<h1 id="Analysis">Analysis</h1><p><img src="http://7xnlp7.com1.z0.glb.clouddn.com/70-notes.png-small" alt="分析"></p>
<h1 id="Solution">Solution</h1><h2 id="Solution_1_Recusive_Version">Solution 1 Recusive Version</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * @param &#123;number&#125; n</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Dynamic Programming - Memorized Recursive Version</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> W = [0, 1, 2];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> climbStairs = function(<span class="keyword">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (W[<span class="keyword">n</span>] === undefined)&#123;</span><br><span class="line">        W[<span class="keyword">n</span>] = climbStairs(<span class="keyword">n</span> - 2) + climbStairs(<span class="keyword">n</span> - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> W[<span class="keyword">n</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>递归方式运行时间:</p>
<p><img src="http://7xnlp7.com1.z0.glb.clouddn.com/70-runtime1.png-small" alt="递归方式运行时间"></p>
<h2 id="Solution_2_Loop_Version">Solution 2 Loop Version</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> &#123;number&#125; n</span><br><span class="line"> * <span class="doctag">@return</span> &#123;number&#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Dynamic Programming - Iteration Version</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span><span class="params">(n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> W = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        W[i] = W[i - <span class="number">2</span>] + W[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> W[n];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>循环方式运行时间:</p>
<p><img src="http://7xnlp7.com1.z0.glb.clouddn.com/70-runtime2.png-small" alt="循环方式运行时间"></p>
<h2 id="性能分析">性能分析</h2><p>理论上循环是比递归快的，因为同样是线性时间复杂度，递归调用需要频繁的进行栈操作，而循环不需要。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Problem_Description">Problem Description</h1><blockquote>
<p>You are climbing a stair case. It takes n steps to reach to the top.</p>
<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://1mhz.me/tags/Algorithm/"/>
    
      <category term="Dynamic Programming" scheme="http://1mhz.me/tags/Dynamic-Programming/"/>
    
      <category term="JavaScript" scheme="http://1mhz.me/tags/JavaScript/"/>
    
      <category term="Leetcode" scheme="http://1mhz.me/tags/Leetcode/"/>
    
      <category term="Leetcode In JS" scheme="http://1mhz.me/categories/Leetcode-In-JS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Percolate Coding Challenge - Funky Rolodex]]></title>
    <link href="http://1mhz.me/2015/hackerrank-funky-rolodex/"/>
    <id>http://1mhz.me/2015/hackerrank-funky-rolodex/</id>
    <published>2015-10-14T17:02:48.000Z</published>
    <updated>2015-10-18T01:17:57.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>上周参加了学校的 Career Fair，想锻炼下面试技巧和口语能力，为下学期找暑期实习做点准备。那天整条路都是熙熙攘攘的面试官和学生，Facebook、Amazon、Microsoft、eBay 这些大公司尤其火爆，有的人排了几个小时才面试上。</p>
<p>因为我刚来 USC 两个月，实力不够，而且大公司又有冷冻期（一次没有录上半年内不再面试），所以我也没敢投大公司，挑了几个看起来不错的小公司试试水。一共投了五个，拿到 Percolate 和 Paypal 两家的 Coding Challenge，还有一家 Demand Media 说是非常喜欢我，之后会打电话让我去 onsite interview（为啥现在还没打电话！）。</p>
<p>这道题是 Percolate 的题，名字叫 Funky Rolodex(复杂的关系网) 并没有考算法，而是非常贴近实际需求，处理文本文件，筛选出正确的数据解析并输出成JSON格式。虽然并不难，但是需要注意的小细节不少，譬如输出结果要按照相应地缩进，要对数据按照 Lastname 和 Firstname 排序。我之前没有注意到排序这一点，导致后来重构了一些代码，而且对我来说，排序这里是最难的（后面会解释）。</p>
<p>总体来说这是一道非常好的非算法题，考到了JSON，正则表达式，面向对象编程，字符串比较等等，而且这道题非常考察细心程度。</p>
<a id="more"></a>
<h2 id="Problem_Description">Problem Description</h2><h3 id="The_Problem">The Problem</h3><p>You’re tasked with taking entries of personal information in multiple formats<br>and normalizing each entry into a standard JSON format. Write your formatted,<br>valid JSON out to a file with two-space indentation and keys sorted<br>alphabetically.</p>
<h3 id="Input">Input</h3><p>Your program will be fed an input file of n lines. Each line contains “entry”<br>information, which consists of a first name, last name, phone number, color,<br>and zip code. The order and format of these lines vary in three separate<br>ways.</p>
<p>The three different formats are as follows:</p>
<ul>
<li>Lastname, Firstname, (703)-742-0996, Blue, 10013</li>
<li>Firstname Lastname, Red, 11237, 703 955 0373</li>
<li>Firstname, Lastname, 10013, 646 111 0101, Green</li>
</ul>
<p>Some lines may be invalid and should not interfere with the processing of<br>subsequent valid lines. A line should be considered invalid if its phone<br>number does not contain the proper number of digits.</p>
<h3 id="Output">Output</h3><p>The program should write a valid, formatted JSON object. The JSON<br>representation should be indented with two spaces and the keys should be sorted<br>in ascending order.</p>
<p>Successfully processed lines should result in a normalized addition to the list<br>associated with the “entries” key. For lines that were unable to be processed,<br>a line number i (where 0 ≤ i &lt; n) for each faulty line should be appended to<br>the list associated with the “errors” key.</p>
<p>The “entries” list should be sorted in ascending alphabetical order by (last<br>name, first name).</p>
<p>The complete output schema is specified below.</p>
<h3 id="Sample">Sample</h3><p>For the input</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Booker T., Washington, <span class="number">87360</span>, <span class="number">373</span> <span class="number">781</span> <span class="number">7380</span>, yellow</span><br><span class="line">Chandler, Kerri, (<span class="number">623</span>)-<span class="number">668</span>-<span class="number">9293</span>, pink, <span class="number">123123121</span></span><br><span class="line">James Murphy, yellow, <span class="number">83880</span>, <span class="number">018</span> <span class="number">154</span> <span class="number">6474</span></span><br><span class="line">asdfawefawea</span><br></pre></td></tr></table></figure>
<p>we should receive the output<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">entries</span>": <span class="value">[</span><br><span class="line">    &#123;</span><br><span class="line">      "<span class="attribute">color</span>": <span class="value"><span class="string">"yellow"</span></span>,</span><br><span class="line">      "<span class="attribute">firstname</span>": <span class="value"><span class="string">"James"</span></span>,</span><br><span class="line">      "<span class="attribute">lastname</span>": <span class="value"><span class="string">"Murphy"</span></span>,</span><br><span class="line">      "<span class="attribute">phonenumber</span>": <span class="value"><span class="string">"018-154-6474"</span></span>,</span><br><span class="line">      "<span class="attribute">zipcode</span>": <span class="value"><span class="string">"83880"</span></span><br><span class="line">    </span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "<span class="attribute">color</span>": <span class="value"><span class="string">"yellow"</span></span>,</span><br><span class="line">      "<span class="attribute">firstname</span>": <span class="value"><span class="string">"Booker T."</span></span>,</span><br><span class="line">      "<span class="attribute">lastname</span>": <span class="value"><span class="string">"Washington"</span></span>,</span><br><span class="line">      "<span class="attribute">phonenumber</span>": <span class="value"><span class="string">"373-781-7380"</span></span>,</span><br><span class="line">      "<span class="attribute">zipcode</span>": <span class="value"><span class="string">"87360"</span></span><br><span class="line">    </span>&#125;</span><br><span class="line">  ]</span>,</span><br><span class="line">  "<span class="attribute">errors</span>": <span class="value">[</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution">Solution</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">process.stdin.resume();</span><br><span class="line">process.stdin.setEncoding(<span class="string">"ascii"</span>);</span><br><span class="line"><span class="keyword">var</span> input = <span class="string">""</span>;</span><br><span class="line">process.stdin.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">input += chunk;</span><br><span class="line">&#125;);</span><br><span class="line">process.stdin.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = input.split(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> role = <span class="keyword">new</span> ROLE(arr);</span><br><span class="line">    role.processAll();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ROLE = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.rawData = arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.jsonObj = &#123;</span><br><span class="line">        entries : [],</span><br><span class="line">        errors  : []</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ROLE.prototype.processAll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; me.rawData.length ; i++) &#123;</span><br><span class="line">        me.processOneLine(i, me.rawData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    me.outputJSON();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ROLE.prototype.processOneLine = <span class="function"><span class="keyword">function</span> (<span class="params">index, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span>,</span><br><span class="line">        pArr = data.split(<span class="string">', '</span>),</span><br><span class="line">        nameRe1     = <span class="regexp">/^.+$/</span>,</span><br><span class="line">        nameRe2     = <span class="regexp">/^(\w+)\s(.+)$/</span>,</span><br><span class="line">        phoneRe1    = <span class="regexp">/^\((\d&#123;3&#125;)\)-(\d&#123;3&#125;)-(\d&#123;4&#125;)$/</span>,</span><br><span class="line">        phoneRe2    = <span class="regexp">/^(\d&#123;3&#125;) (\d&#123;3&#125;) (\d&#123;4&#125;)$/</span>,</span><br><span class="line">        zipRe       = <span class="regexp">/^\d&#123;5&#125;$/</span>,</span><br><span class="line">        colorRe     = <span class="regexp">/^.+$/</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pArr.length == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// type Firstname Lastname, Red, 11237, 703 955 0373</span></span><br><span class="line">        <span class="keyword">if</span> (nameRe2.test(pArr[<span class="number">0</span>]) &amp;&amp; colorRe.test(pArr[<span class="number">1</span>]) &amp;&amp; zipRe.test(pArr[<span class="number">2</span>])</span><br><span class="line">            &amp;&amp; phoneRe2.test(pArr[<span class="number">3</span>])) &#123;</span><br><span class="line">            <span class="keyword">var</span> names = nameRe2.exec(pArr[<span class="number">0</span>]),</span><br><span class="line">                phones = phoneRe2.exec(pArr[<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">var</span> obj = [</span><br><span class="line">                pArr[<span class="number">1</span>], <span class="comment">// color:</span></span><br><span class="line">                names[<span class="number">1</span>], <span class="comment">// firstname</span></span><br><span class="line">                names[<span class="number">2</span>], <span class="comment">// lastname</span></span><br><span class="line">                phones[<span class="number">1</span>] + <span class="string">'-'</span> + phones[<span class="number">2</span>] + <span class="string">'-'</span> + phones[<span class="number">3</span>], <span class="comment">// phonenumber</span></span><br><span class="line">                pArr[<span class="number">2</span>] <span class="comment">// zipcode</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (pArr.length == <span class="number">5</span>)&#123;</span><br><span class="line">        <span class="comment">// type Lastname, Firstname, (703)-742-0996, Blue, 10013</span></span><br><span class="line">        <span class="keyword">if</span> (nameRe1.test(pArr[<span class="number">0</span>]) &amp;&amp; nameRe1.test(pArr[<span class="number">1</span>]) &amp;&amp; phoneRe1.test(pArr[<span class="number">2</span>])</span><br><span class="line">            &amp;&amp; colorRe.test(pArr[<span class="number">3</span>]) &amp;&amp; zipRe.test(pArr[<span class="number">4</span>])</span><br><span class="line">            ) &#123;</span><br><span class="line">            <span class="keyword">var</span> phones = phoneRe1.exec(pArr[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">var</span> obj = [</span><br><span class="line">                pArr[<span class="number">3</span>], <span class="comment">// color</span></span><br><span class="line">                pArr[<span class="number">1</span>], <span class="comment">// firstname</span></span><br><span class="line">                pArr[<span class="number">0</span>], <span class="comment">// lastname</span></span><br><span class="line">                phones[<span class="number">1</span>] + <span class="string">'-'</span> + phones[<span class="number">2</span>] + <span class="string">'-'</span> + phones[<span class="number">3</span>], <span class="comment">// phonenumber</span></span><br><span class="line">                pArr[<span class="number">4</span>] <span class="comment">// zipcode</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// type Firstname, Lastname, 10013, 646 111 0101, Green</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nameRe1.test(pArr[<span class="number">0</span>]) &amp;&amp; nameRe1.test(pArr[<span class="number">1</span>]) &amp;&amp; zipRe.test(pArr[<span class="number">2</span>])</span><br><span class="line">            &amp;&amp; phoneRe2.test(pArr[<span class="number">3</span>]) &amp;&amp; colorRe.test(pArr[<span class="number">4</span>])</span><br><span class="line">            ) &#123;</span><br><span class="line">            <span class="keyword">var</span> phones = phoneRe2.exec(pArr[<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">var</span> obj = [</span><br><span class="line">                pArr[<span class="number">4</span>], <span class="comment">// color</span></span><br><span class="line">                pArr[<span class="number">0</span>], <span class="comment">// firstname</span></span><br><span class="line">                pArr[<span class="number">1</span>], <span class="comment">// lastname</span></span><br><span class="line">                phones[<span class="number">1</span>] + <span class="string">'-'</span> + phones[<span class="number">2</span>] + <span class="string">'-'</span> + phones[<span class="number">3</span>], <span class="comment">// phonenumber</span></span><br><span class="line">                pArr[<span class="number">2</span>] <span class="comment">// zipcode</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (obj) &#123; <span class="comment">// valid</span></span><br><span class="line">        me.jsonObj.entries.push(obj);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        me.jsonObj.errors.push(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ROLE.prototype.sortEntries = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// if (a[2].localeCompare(b[2], 'en-US', &#123;sensitivity: 'variant'&#125;) &lt; 0) &#123;</span></span><br><span class="line">    <span class="comment">//     return -1;</span></span><br><span class="line">    <span class="comment">// &#125; else if (a[2].localeCompare(b[2], 'en-US', &#123;sensitivity: 'variant'&#125;) == 0) &#123;</span></span><br><span class="line">    <span class="comment">//     return a[1].localeCompare(b[1], 'en-US', &#123;sensitivity: 'variant'&#125;);</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     return 1;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">2</span>] &lt; b[<span class="number">2</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[<span class="number">2</span>] == b[<span class="number">2</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">1</span>] &lt; b[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[<span class="number">1</span>] == b[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ROLE.prototype.outputJSON = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span>,</span><br><span class="line">        obj = me.jsonObj,</span><br><span class="line">        oneIndent = <span class="string">'  '</span>,</span><br><span class="line">        twoIndent = oneIndent + oneIndent,</span><br><span class="line">        threeIndent = oneIndent + twoIndent;</span><br><span class="line"></span><br><span class="line">    obj.entries.sort(me.sortEntries);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'&#123;\n'</span>;</span><br><span class="line">    str += oneIndent + <span class="string">'"entries": [\n'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; obj.entries.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> p = obj.entries[i];</span><br><span class="line"></span><br><span class="line">        str += twoIndent + <span class="string">'&#123;\n'</span>;</span><br><span class="line">        str += threeIndent + <span class="string">'"color": "'</span> + p[<span class="number">0</span>] + <span class="string">'",\n'</span>;</span><br><span class="line">        str += threeIndent + <span class="string">'"firstname": "'</span> + p[<span class="number">1</span>] + <span class="string">'",\n'</span>;</span><br><span class="line">        str += threeIndent + <span class="string">'"lastname": "'</span> + p[<span class="number">2</span>] + <span class="string">'",\n'</span>;</span><br><span class="line">        str += threeIndent + <span class="string">'"phonenumber": "'</span> + p[<span class="number">3</span>] + <span class="string">'",\n'</span>;</span><br><span class="line">        str += threeIndent + <span class="string">'"zipcode": "'</span> + p[<span class="number">4</span>] + <span class="string">'"\n'</span>;</span><br><span class="line">        str += twoIndent + <span class="string">'&#125;'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i != obj.entries.length - <span class="number">1</span>) &#123;</span><br><span class="line">            str += <span class="string">','</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += oneIndent + <span class="string">'],\n'</span>;</span><br><span class="line">    str += oneIndent + <span class="string">'"errors": [\n'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; obj.errors.length; i++) &#123;</span><br><span class="line">        str += twoIndent + obj.errors[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i != obj.errors.length - <span class="number">1</span>) &#123;</span><br><span class="line">            str += <span class="string">','</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        str += <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += oneIndent + <span class="string">']\n'</span>;</span><br><span class="line">    str += <span class="string">'&#125;\n'</span>;</span><br><span class="line"></span><br><span class="line">    process.stdout.write(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Testcases">Testcases</h2><h3 id="Download_Link">Download Link</h3><p><a href="/download/test_cases_funky_rolodex.zip">Download</a></p>
<h3 id="Usage">Usage</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="number">1.</span> create code.js <span class="keyword">and</span> paste <span class="keyword">the</span> code <span class="keyword">above</span> <span class="keyword">to</span> <span class="keyword">it</span></span><br><span class="line"> * <span class="number">2.</span> <span class="command">run</span> code.js <span class="keyword">with</span> Node.js <span class="keyword">in</span> <span class="keyword">the</span> terminal, <span class="keyword">set</span> input001.txt <span class="keyword">as</span> stdin</span><br><span class="line"> * <span class="number">3.</span> <span class="keyword">the</span> output will be <span class="keyword">in</span> stdout</span><br><span class="line"> */</span><br><span class="line">$ node code.js &lt; input001.txt</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>上周参加了学校的 Career Fair，想锻炼下面试技巧和口语能力，为下学期找暑期实习做点准备。那天整条路都是熙熙攘攘的面试官和学生，Facebook、Amazon、Microsoft、eBay 这些大公司尤其火爆，有的人排了几个小时才面试上。</p>
<p>因为我刚来 USC 两个月，实力不够，而且大公司又有冷冻期（一次没有录上半年内不再面试），所以我也没敢投大公司，挑了几个看起来不错的小公司试试水。一共投了五个，拿到 Percolate 和 Paypal 两家的 Coding Challenge，还有一家 Demand Media 说是非常喜欢我，之后会打电话让我去 onsite interview（为啥现在还没打电话！）。</p>
<p>这道题是 Percolate 的题，名字叫 Funky Rolodex(复杂的关系网) 并没有考算法，而是非常贴近实际需求，处理文本文件，筛选出正确的数据解析并输出成JSON格式。虽然并不难，但是需要注意的小细节不少，譬如输出结果要按照相应地缩进，要对数据按照 Lastname 和 Firstname 排序。我之前没有注意到排序这一点，导致后来重构了一些代码，而且对我来说，排序这里是最难的（后面会解释）。</p>
<p>总体来说这是一道非常好的非算法题，考到了JSON，正则表达式，面向对象编程，字符串比较等等，而且这道题非常考察细心程度。</p>]]>
    
    </summary>
    
      <category term="Coding Challenge" scheme="http://1mhz.me/tags/Coding-Challenge/"/>
    
      <category term="Hackerrank" scheme="http://1mhz.me/tags/Hackerrank/"/>
    
      <category term="JSON" scheme="http://1mhz.me/tags/JSON/"/>
    
      <category term="JavaScript" scheme="http://1mhz.me/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://1mhz.me/tags/Node-js/"/>
    
      <category term="Regular Expression" scheme="http://1mhz.me/tags/Regular-Expression/"/>
    
      <category term="Hackerrank In JS" scheme="http://1mhz.me/categories/Hackerrank-In-JS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Leetcode In JS #258 Add Digits]]></title>
    <link href="http://1mhz.me/2015/leetcode-in-js-258-add-digits/"/>
    <id>http://1mhz.me/2015/leetcode-in-js-258-add-digits/</id>
    <published>2015-09-28T23:00:00.000Z</published>
    <updated>2015-10-21T17:55:25.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem_Description">Problem Description</h2><blockquote>
<p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p>
<p>For example:</p>
<p>Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.</p>
</blockquote>
<a id="more"></a>
<h2 id="Solution">Solution</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;<span class="keyword">number</span>&#125; num</span><br><span class="line"> * @<span class="keyword">return</span> &#123;<span class="keyword">number</span>&#125;</span><br><span class="line"> * @desc trival solution including recursion.</span><br><span class="line"> */</span><br><span class="line">var addDigits = <span class="function"><span class="keyword">function</span></span> (num) &#123;</span><br><span class="line">    var quotient = num,</span><br><span class="line">        remainder = <span class="number">0</span>,</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (quotient &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        remainder = quotient % <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + remainder;</span><br><span class="line">        quotient = parseInt(quotient / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + quotient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sum</span> &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> addDigits(<span class="built_in">sum</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem_Description">Problem Description</h2><blockquote>
<p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p>
<p>For example:</p>
<p>Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://1mhz.me/tags/Algorithm/"/>
    
      <category term="JavaScript" scheme="http://1mhz.me/tags/JavaScript/"/>
    
      <category term="Leetcode" scheme="http://1mhz.me/tags/Leetcode/"/>
    
      <category term="Leetcode In JS" scheme="http://1mhz.me/categories/Leetcode-In-JS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 nodejs 批量下载红宝书音频]]></title>
    <link href="http://1mhz.me/2014/get-gre-word-list-tapes/"/>
    <id>http://1mhz.me/2014/get-gre-word-list-tapes/</id>
    <published>2014-07-28T02:05:00.000Z</published>
    <updated>2015-10-08T18:04:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>今天早上因为<del>罪恶感</del>奋发图强，早早起来开始背单词。背之前想先听一下WordList 3的单词音频，所以用手机对着红宝书WordList上的二维码扫了一下，进入网页听录音（新东方真是与时俱进呀！都用上二维码了！！）。</p>
<p>听了一会，突发奇想，何不把所有WordList的音频都下下来装在手机里呢，这样随时都可以听！于是开始笨拙的把微信里的网页链接分享到电脑上，然后用浏览器一个一个的下载，下了几个感觉不对劲。。。太麻烦了，这种重复性的工作干嘛要自己做！！交给计算机就好了嘛！</p>
<p>so，我写了个<code>nodejs</code>程序批量的下载，不到1分钟，42个list的录音就都进入了我的硬盘。 ; ）</p>
<p>首先是github <a href="https://github.com/dukewan/getGreWordListTapes" target="_blank" rel="external">项目地址</a>，取名为 <code>getGreWordListTapes</code> ~</p>
<p>下面我说说制作过程<br><a id="more"></a></p>
<h1 id="找规律">找规律</h1><p>红宝书里的二维码所包含的信息就是音频的链接，链接的形式如下：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/download.dogwood.com.cn/online</span><span class="regexp">/grechjx/</span><span class="constant">WordList01</span>.mp3</span><br></pre></td></tr></table></figure>
<p>很容易看出，末尾就是WordList01.mp3，代表第1个单词表的音频，随便改了下那个数字，改成02，03，..，42等，都能访问对应的单词表的音频。</p>
<p>所以批量下载就是从01循环到42，就能下载所有的单词表的音频啦。</p>
<h1 id="处理流程">处理流程</h1><p><img src="/images/2014/get-gre-word-list-tapes-flow.png" alt="处理流程图"></p>
<h1 id="几点注意">几点注意</h1><p>其实本身也很简单，按照流程图很快就能做出来，但是有一些需要注意的地方。譬如：</p>
<ol>
<li><p>nodejs 的  <code>http</code>  模块的 <code>get</code> 方法可以帮助我们请求目标url，并获取返回的数据，但是数据不是一次性返回的，而是一段( <code>chunk</code>）一段的来的，因此我们需要在 <code>get</code> 方法的回调函数里对 http response的 <code>data</code> 事件进行监听，并对获取到的数据段进行文件的 append 操作。</p>
</li>
<li><p>nodejs 可以并发的下载，而且各个文件的下载并不是按顺序来的。但是文件的写入是按顺序并且是同步的写入的，不然就会出现文件错乱。因此我采用了 <code>fs</code> 模块的 <code>appendFileSync</code> 方法。</p>
</li>
<li><p>需要对音频文件是否存在进行判断，不然就会出现第二次运行下载程序的时候，会在之前下载过的文件后继续append。 这是个逻辑问题，哈~</p>
</li>
</ol>
<h1 id="处理代码">处理代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">    util = <span class="built_in">require</span>(<span class="string">'util'</span>),</span><br><span class="line">    fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>),</span><br><span class="line">    chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> urlTemplate = <span class="string">'http://download.dogwood.com.cn/online/grechjx/WordList%s.mp3'</span>,</span><br><span class="line">    start = <span class="number">1</span>,</span><br><span class="line">    end = <span class="number">42</span>,</span><br><span class="line">    fileBasePath = <span class="string">'./download/'</span>,</span><br><span class="line">    fileTemplate = <span class="string">'WordList%s.mp3'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chalk.red(<span class="string">'G'</span>) + chalk.green(<span class="string">'R'</span>) + chalk.yellow(<span class="string">'E'</span>)</span><br><span class="line">            + chalk.blue(<span class="string">' 词汇精选音频'</span>)</span><br><span class="line">            + chalk.cyan(<span class="string">'  开始下载！！！'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chalk.green(<span class="string">'Tips: 每个list的音频大概是13M，所以下载速度会因网速而异，'</span></span><br><span class="line">            + <span class="string">'请耐心等待哦~ 下载完成的list都在download文件夹中。'</span>) )</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">    download(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = (i &lt; <span class="number">10</span> ? <span class="string">'0'</span> : <span class="string">''</span>) + i,</span><br><span class="line">    url = util.format(urlTemplate, str),</span><br><span class="line">    filename = util.format(fileTemplate, str),</span><br><span class="line">    filePath = path.normalize(fileBasePath + filename);</span><br><span class="line"></span><br><span class="line">    fs.exists(filePath, <span class="function"><span class="keyword">function</span> (<span class="params">exists</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(exists) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(chalk.yellow(<span class="string">'% '</span>) + chalk.white(filename) + chalk.yellow(<span class="string">' 已存在，不再下载'</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            http.get(url, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// console.log(chalk.magenta('$ ') + chalk.white('开始下载 ') + chalk.white(filename));</span></span><br><span class="line">                res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">                    fs.appendFileSync(filePath, chunk);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(chalk.green(<span class="string">'✓ '</span>) + chalk.yellow(<span class="string">'下载 '</span>) + chalk.blue(filename) + chalk.green(<span class="string">' 成功!'</span>));</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(chalk.red(<span class="string">'X '</span>) + chalk.yellow(<span class="string">'下载 '</span>) + chalk.blue(filename) + chalk.red(<span class="string">' 失败!'</span>));</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="运行效果">运行效果</h1><p>使用 <a href="https://www.npmjs.org/package/chalk" target="_blank" rel="external">chalk</a> 模块添加了下图中的终端高亮效果，嘿嘿~</p>
<p><img src="/images/2014/download.png" alt="下载效果"></p>
<p>最后，把所有的音频添加到itunes中做成专辑，加上封面~</p>
<p><img src="/images/2014/itunes.png" alt="itunes"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>今天早上因为<del>罪恶感</del>奋发图强，早早起来开始背单词。背之前想先听一下WordList 3的单词音频，所以用手机对着红宝书WordList上的二维码扫了一下，进入网页听录音（新东方真是与时俱进呀！都用上二维码了！！）。</p>
<p>听了一会，突发奇想，何不把所有WordList的音频都下下来装在手机里呢，这样随时都可以听！于是开始笨拙的把微信里的网页链接分享到电脑上，然后用浏览器一个一个的下载，下了几个感觉不对劲。。。太麻烦了，这种重复性的工作干嘛要自己做！！交给计算机就好了嘛！</p>
<p>so，我写了个<code>nodejs</code>程序批量的下载，不到1分钟，42个list的录音就都进入了我的硬盘。 ; ）</p>
<p>首先是github <a href="https://github.com/dukewan/getGreWordListTapes">项目地址</a>，取名为 <code>getGreWordListTapes</code> ~</p>
<p>下面我说说制作过程<br>]]>
    
    </summary>
    
      <category term="Node.js" scheme="http://1mhz.me/tags/Node-js/"/>
    
      <category term="Node.js" scheme="http://1mhz.me/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何编写一个connect中间件]]></title>
    <link href="http://1mhz.me/2014/how-to-code-a-connect-middle-ware/"/>
    <id>http://1mhz.me/2014/how-to-code-a-connect-middle-ware/</id>
    <published>2014-07-13T04:20:00.000Z</published>
    <updated>2015-10-08T18:04:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="connect简介">connect简介</h1><blockquote>
<p>Connect is a middleware framework for node.</p>
</blockquote>
<p>Connect 是 nodejs 的中间件框架。何为中间件？中间件就是用户请求和返回结果之间的一个又一个筛选工具。正如 <a href="http://weibo.com/777865156?topnav=1&amp;wvr=5&amp;topsug=1" target="_blank" rel="external">@Luics</a> 所说“如果把一个http处理过程比作是污水处理，中间件就像是一层层的过滤网。”</p>
<p>中间件能在请求用户请求处理之前，进行一些预处理，而在返回结果之前，又进行一些返回之前的处理。非常类似于洋葱模型，一层一层的进入，又一层一层的退出。</p>
<a id="more"></a>
<p>Connect中间件的处理流程如下：</p>
<p><img src="/images/2014/middleware_flow.png" alt="connect处理流程"></p>
<p>nodejs 中，http server 有两个参数传入，分别是 request 和 response 代表请求和响应结果，这两个参数也会被传入中间件中。此外，connect 中间件还有第三个参数：next 函数。通常使用该参数的方法是：<code>next();</code> 。因此大家常认为 next 代表下一个中间件函数，但事实上，next 只是 connect 生成的一个函数，它的作用是告诉 connect 可以调用下一个中间件来处理 request 和 response 了。如果下一个中间件，则调用，如果不存在，就没有调用了。</p>
<p><strong>参考:</strong>更多关于 conncet 的介绍请访问以下链接：</p>
<ol>
<li><a href="https://github.com/senchalabs/connect" target="_blank" rel="external">connect github page</a></li>
<li><a href="http://www.senchalabs.org/connect/" target="_blank" rel="external">connect doc page</a></li>
<li><a href="http://www.cnblogs.com/luics/archive/2012/11/28/2775206.html" target="_blank" rel="external">Luics 天猫鬼道 connect简介</a></li>
<li><a href="http://blog.fens.me/nodejs-connect/" target="_blank" rel="external">connct 内置中间件介绍</a></li>
<li><a href="http://www.infoq.com/cn/articles/nodejs-connect-module" target="_blank" rel="external">深入浅出Node.js：Connect模块解析一</a></li>
<li><a href="http://www.infoq.com/cn/articles/nodejs-8-connect-module-part-2" target="_blank" rel="external">深入浅出Node.js：Connect模块解析二</a></li>
</ol>
<h1 id="一个简单的目标">一个简单的目标</h1><p>看完简介和一些深入的介绍之后，我们就可以开始着手做一个自己的中间件来方便我们的 web 开发了。</p>
<blockquote>
<p>实践才是最好的老师，不踩坑就不能深入理解。</p>
</blockquote>
<h2 id="需求">需求</h2><p>现在笔者有这么一个需求：在本地进行 demo 页面开发的时候，对静态页面进行模块式开发，实现 html 页面之间的引用。譬如，做一个公用的 header 或者 footer ，以便其他页面进行引用。</p>
<h2 id="问题">问题</h2><p>在没有 nodejs 之前，可以通过对 Apache 服务器进行一些配置，以支持 `<a href="http://en.wikipedia.org/wiki/Server_Side_Includes" target="_blank" rel="external">SSI(Server Side Include)</a>‘ 命令。通过类似</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment">&lt;!--#include virtual="./mod/header.html"--&gt;</span>`</span><br></pre></td></tr></table></figure>
<p>的命令来实现引用。</p>
<p>现在在 nodejs 环境下开发，就没有了这种支持。所以我们要自己动手，丰衣足食。没有的，我们就自己创造工具。</p>
<h1 id="功能、接口设计">功能、接口设计</h1><h2 id="功能">功能</h2><p>要实现的功能非常简单——当服务器收到对 html 文件的请求时，将请求的 html 文件中的类似 <code>&lt;!--#include virtual=&quot;./mod/header.html&quot;--&gt;</code> 的字符串替换成对应模块的 html 代码，然后将请求的内容返回给浏览器。</p>
<p>流程图如下：</p>
<p><img src="/images/2014/connect-ssiinclude-flow.png" alt="connect-ssiinclude 流程图"></p>
<h2 id="接口">接口</h2><p>中间件的接口，即为中间件调用者可以配置的参数。通过参数配置来使中间件正常工作，和动态定制。</p>
<p>这里我们需要考虑几个问题：</p>
<ol>
<li>获取到 url 请求后，怎么访问到被请求的 html 文件？</li>
<li>怎么访问到该 html 文件中所  <code>#include</code> 的文件？</li>
<li>文件编码会影响吗？</li>
<li>是否需要输出 debug 信息？</li>
</ol>
<p>以上几个问题是从功能设计中的流程图所分析出来的，也是我们实际编码时必须要解决的问题。</p>
<ol>
<li>针对问题1，我们可以在 connect 中调用本中间件时传入 html  文件的根目录，然后解析请求 url 中请求的 html 文件名，两者组装起来，就是文件系统中该 html 文件的路径了，使用 nodejs 的 fs 模块可以访问到</li>
<li>针对问题2，<code>#include</code> 中的被引用 html 文件路径通常是相对于引用 html的，所以我们可以将应用 html文件路径和被应用文件的路径组合起来即可</li>
<li>针对问题3，这个问题其实是实际开发时遇到的问题，以后开发需要注意这一点。因为涉及到文件的读写和处理，所以需要指定文件编码</li>
<li>可以通过参数进行配置</li>
</ol>
<p>综合上面几点，我们可以拟定以下接口：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 传入中间件的配置对象option:</span><br><span class="line">var option = &#123;</span><br><span class="line">    root		:  <span class="string">"the root path of the requested html file"</span>,  // required, <span class="keyword">default</span> <span class="keyword">to</span> <span class="string">''</span></span><br><span class="line">    encoding	: <span class="string">"your encoding charset"</span>,  // <span class="literal">not</span> required, <span class="keyword">default</span> <span class="keyword">to</span> <span class="string">'utf8'</span></span><br><span class="line">    print		: <span class="string">"boolean, whether to print the include information"</span> // required, <span class="keyword">default</span> <span class="keyword">to</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="代码实现">代码实现</h1><h2 id="代码组织">代码组织</h2><p>中间件都是node的扩展模块，好的模块应该有清晰的代码组织方式。我们可以参考一下 connect、express等模块的组织方式，通常都是采用以下结构：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> moduleName/</span><br><span class="line"></span>	-<span class="ruby"> lib/</span><br><span class="line"></span>		-<span class="ruby"> file.js</span><br><span class="line"></span>	-<span class="ruby"> node_modules/</span><br><span class="line"></span>		-<span class="ruby"> modulesInstalled</span><br><span class="line"></span>	-<span class="ruby"> index.js</span><br><span class="line"></span>	-<span class="ruby"> package.json</span><br><span class="line"></span>	-<span class="ruby"> <span class="constant">README</span>.md</span></span><br></pre></td></tr></table></figure>
<p>即采用</p>
<ul>
<li>lib 目录存放模块的核心代码</li>
<li>node_modules 目录存储依赖的模块</li>
<li>index.js 文件暴露模块的接口</li>
<li>package.json 文件来配置模块信息</li>
<li>README.md 文件对模块的使用进行说明</li>
</ul>
<h2 id="package-json">package.json</h2><p>设置模块名称、介绍、版本、依赖的模块信息等等，由于本中间件全部采用 nodejs 内置模块，因此没有设置模块依赖  <code>dependencies</code> 。</p>
<p>在这里，我给我的模块去了一个名字：<code>connect-ssiinclude</code> ，标识它是一个基于 connect 的中间件，作用是支持 ssi 命令中的 include 。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"connect-ssiinclude"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"enable ssi include in html and shtml files"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">    <span class="string">"author"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"qishang"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"heyizhaobupt@gmail.com"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://1mhz.me"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"keywords"</span>: [</span><br><span class="line">        <span class="string">"connect"</span>,</span><br><span class="line">        <span class="string">"middle ware"</span>,</span><br><span class="line">        <span class="string">"ssi"</span>,</span><br><span class="line">        <span class="string">"include"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"repository"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"https://github.com/dukewan/connect-ssiInclude.git"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多关于 package.json 的配置见：<a href="https://www.npmjs.org/doc/files/package.json.html" target="_blank" rel="external">npm doc package.json</a></p>
<h2 id="index-js">index.js</h2><p>nodejs 的模块系统的机制是，模块引用时，默认读取模块目录下的 index.js，即 index.js 能暴露出模块的公有接口。这样在自己的程序中，引用模块时，只需要指定模块目录的路径就行了，不用关心模块的核心代码在哪里。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">'./lib/include'</span>);</span><br></pre></td></tr></table></figure>
<p>该文件只有一行代码，就是 require 模块的核心代码。</p>
<h2 id="lib/include-js">lib/include.js</h2><p>这个文件就是核心代码所在了，我们需要在这里实现上面流程图中的所有逻辑。下面我们来解析下实现过程：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内置模块的引用，分别为文件系统模块fs，路径处理模块path，url模块等</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 这个模块暴露了一个方法，这个方法的调用会返回一个处理函数(见下面，return 处)，</span><br><span class="line"> * 用于接收connect传入的 req ,  res ,  next 参数并进行处理、返回</span><br><span class="line"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">option</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 对传入模块的配置对象 option 进行处理，设置默认参数等</span></span><br><span class="line">    <span class="keyword">var</span> option = option || &#123;&#125;;</span><br><span class="line">    option.root = option.root || <span class="string">''</span>;</span><br><span class="line">    option.encoding = option.encoding || <span class="string">'utf8'</span>;</span><br><span class="line">    option.debug = option.debug || <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reqUrl = req.url,						<span class="comment">// 请求链接</span></span><br><span class="line">            pathname = url.parse(reqUrl).pathname,	<span class="comment">// 请求链接的路径部分</span></span><br><span class="line">            file = option.root + pathname,			<span class="comment">// 被请求的文件路径</span></span><br><span class="line">            reg = <span class="regexp">/&lt;!--#include virtual="(.+)"--&gt;/g</span>,	<span class="comment">// include 命令正则</span></span><br><span class="line">            includes,								<span class="comment">// 匹配出来的 include 数组，</span></span><br><span class="line">            count = <span class="number">0</span>,								<span class="comment">// include 的次数</span></span><br><span class="line">            content = <span class="string">""</span>;							<span class="comment">// 要返回的内容</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 对要处理的请求进行筛选，不是请求的html文件则直接进入下一个中间件</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\w+\.s*htm/</span>.test(pathname) === <span class="literal">false</span>) &#123;</span><br><span class="line">            next();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(fs.existsSync(path.normalize(file))) &#123;</span><br><span class="line">        	<span class="comment">// 输出调试信息</span></span><br><span class="line">            <span class="keyword">if</span> (option.debug) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'#connect-include =&gt; request url:'</span> + reqUrl);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'#connect-include =&gt; pathname:'</span> + pathname);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'#connect-include =&gt; file:'</span> + file);</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 读取请求的 html 文件</span></span><br><span class="line">            content = (<span class="built_in">String</span>)(fs.readFileSync(path.normalize(file), &#123;encoding: option.encoding&#125;));</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 采用正则匹配该 html 中是否包含 inlcude 命令</span></span><br><span class="line">            <span class="keyword">while</span> ((includes = reg.exec(content)) !== <span class="literal">null</span>) &#123;</span><br><span class="line">                option.debug &amp;&amp; <span class="built_in">console</span>.log(<span class="string">'#connect-include =&gt; include :'</span> + includes[<span class="number">0</span>]);</span><br><span class="line">                count++;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> includePath = path.normalize(file + <span class="string">'/../'</span> + includes[<span class="number">1</span>]); <span class="comment">// 被 include 的文件路径</span></span><br><span class="line">                <span class="keyword">if</span>(fs.existsSync(path.normalize(includePath))) &#123;</span><br><span class="line">                	<span class="comment">// 替换 include 命令为 文件内容</span></span><br><span class="line">                    <span class="keyword">var</span> includeContent = fs.readFileSync(includePath, &#123;encoding: option.encoding&#125;);</span><br><span class="line">                    content = content.replace(includes[<span class="number">0</span>], includeContent);</span><br><span class="line">                    option.debug &amp;&amp; <span class="built_in">console</span>.log(<span class="string">'#connect-include =&gt; include file:'</span> + includePath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!count) &#123; <span class="comment">// 没有 include 过，则直接进入下一个中间件</span></span><br><span class="line">            next();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回经过组装的被请求的 html 内容</span></span><br><span class="line">        res.end(content);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="中间件发布">中间件发布</h1><p>写完了核心代码，经过测试，就能够进行中间件发布了，让全世界的小伙伴都能用到我们的中间件。</p>
<p>要发布一个中间件，我们需要做下面这几件事：</p>
<h2 id="README-md">README.md</h2><blockquote>
<p>一个完整的开源项目需要完善的文档说明。</p>
</blockquote>
<p>我们不能写了代码就不管了，我们还需要教别人怎么用我们的代码，因此我们至少得写一个<code>README.md</code>，对模块的安装、使用、配置进行简要的说明。如果模块比较复杂的话，我们还需要专门建一个 doc 目录，为使用细节撰写说明文档。广受欢迎的开源项目都是这么做的。</p>
<p>下面是 connect-ssiinclude 的 README.md 文件内容：</p>
<h3 id="connect-ssiinclude">connect-ssiinclude</h3><p>A middle ware for enable ssi include patterns in your html and shtml files. It’s very useful during developments when<br>you write html files in the way of modules.</p>
<p>It will replace pattern like <code>&lt;!--#include virtual=&quot;./mod/header.html&quot;--&gt;</code> with the actual header.html file and transfer<br>to your browser.</p>
<h3 id="Install">Install</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> <span class="comment">--save connect-ssiinclude</span></span></span><br></pre></td></tr></table></figure>
<h3 id="Usage">Usage</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="preprocessor"><span class="keyword">include</span> = require('connect-ssiinclude');</span></span><br><span class="line">app.<span class="keyword">use</span>(<span class="preprocessor"><span class="keyword">include</span>(&#123;root: __dirname&#125;));</span></span><br></pre></td></tr></table></figure>
<h3 id="Option">Option</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">include(option) // <span class="operator"><span class="keyword">use</span> a <span class="keyword">option</span> <span class="keyword">object</span> <span class="keyword">to</span> config <span class="keyword">connect</span>-<span class="keyword">include</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    root: __dirname,</span><br><span class="line">    <span class="keyword">encoding</span>: <span class="string">"your encoding charset"</span>, // <span class="keyword">default</span> <span class="keyword">to</span> <span class="string">'utf8'</span></span><br><span class="line">    print: <span class="string">"whether to print the include information"</span> // <span class="keyword">default</span> <span class="keyword">to</span> <span class="string">'false'</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="在_npm_上发布">在 npm 上发布</h2><p>所有代码和文档准备好之后，我们就可以发布中间件了。发布到哪？<a href="https://www.npmjs.org/" target="_blank" rel="external">npm( node package manager ，node包管理器)</a>。</p>
<h3 id="安装">安装</h3><p>unix 下安装： 见 <a href="https://github.com/npm/npm#fancy-install-unix" target="_blank" rel="external">npm github page</a></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L http<span class="variable">s:</span>//npmjs.org/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<h3 id="npm_adduser">npm adduser</h3><p>首次发布之前需要创建 npm 用户，需要在终端运行：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> adduser</span><br></pre></td></tr></table></figure>
<p>根据指示进行输入以完成创建。</p>
<h3 id="npm_publish">npm publish</h3><p>创建好用户之后就可以发布了，终端运行：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>npm publish path/to/your/<span class="class"><span class="keyword">module</span>     // 指定你的模块文件夹路径</span></span><br></pre></td></tr></table></figure>
<p>可能会出现你的模块名称已经被别人使用了等等问题，按照报错进行修改即可。</p>
<h1 id="大功告成！">大功告成！</h1><p>不出意外，现在你已经成功编写并在npm上发布了一个connect中间件了。</p>
<p>撒花～</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="connect简介">connect简介</h1><blockquote>
<p>Connect is a middleware framework for node.</p>
</blockquote>
<p>Connect 是 nodejs 的中间件框架。何为中间件？中间件就是用户请求和返回结果之间的一个又一个筛选工具。正如 <a href="http://weibo.com/777865156?topnav=1&amp;wvr=5&amp;topsug=1">@Luics</a> 所说“如果把一个http处理过程比作是污水处理，中间件就像是一层层的过滤网。”</p>
<p>中间件能在请求用户请求处理之前，进行一些预处理，而在返回结果之前，又进行一些返回之前的处理。非常类似于洋葱模型，一层一层的进入，又一层一层的退出。</p>]]>
    
    </summary>
    
      <category term="Connect" scheme="http://1mhz.me/tags/Connect/"/>
    
      <category term="Node.js" scheme="http://1mhz.me/tags/Node-js/"/>
    
      <category term="中间件" scheme="http://1mhz.me/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="Node.js" scheme="http://1mhz.me/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2014 Alibaba Summer Intern Day 1]]></title>
    <link href="http://1mhz.me/2014/ali-summer-intern-day1/"/>
    <id>http://1mhz.me/2014/ali-summer-intern-day1/</id>
    <published>2014-07-01T06:00:00.000Z</published>
    <updated>2015-10-08T18:04:31.000Z</updated>
    <content type="html"><![CDATA[<p>今天入职，耶！</p>
<p>公司安排的酒店在西湖区，离阿里大本营西溪园区10公里左右。好在支付宝大厦在西湖区天目山路，离酒店不远，支付宝和西溪园区之间还有公司的穿梭巴士。所以和小伙伴们约好了早上去坐7:40的穿梭巴士。</p>
<p>室友6点刚过就爬起床了，洗漱声把我也吵醒了。无奈起床洗漱，洗漱完才6:30。不幸福 ＝_＝。</p>
<p>恰逢杭州下起了小雨，折腾了一会，总算到了支付宝大厦。坐上巴士启程。半小时左右就到了，先入职了的小伙伴领着去食堂吃了顿不错的早餐：甜！豆腐脑＋贵族食品茶叶蛋＋小资情调小蛋糕～</p>
<a id="more"></a>
<h1 id="入职办理">入职办理</h1><p>月底、毕业季直接导致了今天入职人数爆棚，同一天入职的正式员工和实习生大概280多个（话说有好多漂亮的软妹子 : P ）。一行人在几个hr的带领下，浩浩荡荡的队伍来到了5号楼的报告厅，据说马总经常在这慷慨激昂的演讲。</p>
<p>虽然人很多，但是现场很有秩序，由于需要领取各种协议材料（每个人都不同），hr号召大家排成3纵队，材料hr事先按照姓氏首字母进行了分类，方便查找每个人的材料，每次9个人去去材料，差不多了就下一波人。取到材料后就可以按照材料上标注的序号对号入座，非常之有效率。</p>
<p>后续就是一些材料的核实和协议的签署，无他。</p>
<h1 id="行政培训">行政培训</h1><p>主要是西溪园区衣食住行的介绍。目前西溪园区淘宝城第一期完工，有6栋办公楼在使用。楼之间都是连同的，这意味着你可以不下楼从1号楼走到6号楼，哈哈。</p>
<h2 id="吃">吃</h2><p>1号楼、2号楼、5号楼分别有一个大餐厅。各有特色，1号楼是台湾人开的，包含中餐和西餐，是公认的最好吃的餐厅。2号楼主要是粤菜。5号楼专攻面食，当然也有其他吃的。</p>
<p>Ps: 在园区消费可以直接刷工牌，因为工牌是和你的支付宝账号实名绑定的，十分方便。</p>
<h2 id="娱乐">娱乐</h2><p>健身房、篮球场、羽毛球场、台球室应有尽有，更有意思的是每栋楼靠近电梯的空地上都摆了桌上足球，大家随意玩。1号楼餐厅那还有实况游戏和两个小球门供玩耍。</p>
<h1 id="财务培训">财务培训</h1><p>各种报销制度、规定。开始的视频很有意思，很没节操。后面讲内容很boring，睡着了。。</p>
<h1 id="IT培训">IT培训</h1><p>各种硬件设置、内网使用介绍。</p>
<h1 id="薪酬福利">薪酬福利</h1><p>除了工资查询之外，其他的跟实习生关系不大，但是听着还是挺不错的。尤其是iHome政策，为p5-p8的员工提供买房首付无息贷款，赞。</p>
<h1 id="领工牌、电脑">领工牌、电脑</h1><p>一整天的培训搞完已经累成狗了，为了第二天上班方便，赶紧去hr服务中心领了工牌。电脑视部门而定，台式机、笔记本等。天猫前端实习生27寸iMac不解释。哈哈哈 : P</p>
<h1 id="部门熟悉">部门熟悉</h1><p>带我的师兄很 nice，告知我各种基本情况，说给我一周时间熟悉开发环境等，再开始干点独立的小功能。只透露一句，天猫前端进行采用GULP构建。Fighting！～</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天入职，耶！</p>
<p>公司安排的酒店在西湖区，离阿里大本营西溪园区10公里左右。好在支付宝大厦在西湖区天目山路，离酒店不远，支付宝和西溪园区之间还有公司的穿梭巴士。所以和小伙伴们约好了早上去坐7:40的穿梭巴士。</p>
<p>室友6点刚过就爬起床了，洗漱声把我也吵醒了。无奈起床洗漱，洗漱完才6:30。不幸福 ＝_＝。</p>
<p>恰逢杭州下起了小雨，折腾了一会，总算到了支付宝大厦。坐上巴士启程。半小时左右就到了，先入职了的小伙伴领着去食堂吃了顿不错的早餐：甜！豆腐脑＋贵族食品茶叶蛋＋小资情调小蛋糕～</p>]]>
    
    </summary>
    
      <category term="Intern" scheme="http://1mhz.me/tags/Intern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reborn]]></title>
    <link href="http://1mhz.me/2014/reborn/"/>
    <id>http://1mhz.me/2014/reborn/</id>
    <published>2014-06-15T04:20:00.000Z</published>
    <updated>2015-10-08T18:04:31.000Z</updated>
    <content type="html"><![CDATA[<p>上一次写博还是1年前的事了，懒惰让我停止了更新。</p>
<p>随着接触的技术的增多，发现前端水真是很深，代码的世界是如此美妙。我得加快步伐，追赶他们了，这个博客，也是我的每一步的见证。希望通过写文章的形式，反思、咀嚼、吸收的知识，传播技术。</p>
<p>这也算是一种重生吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一次写博还是1年前的事了，懒惰让我停止了更新。</p>
<p>随着接触的技术的增多，发现前端水真是很深，代码的世界是如此美妙。我得加快步伐，追赶他们了，这个博客，也是我的每一步的见证。希望通过写文章的形式，反思、咀嚼、吸收的知识，传播技术。</p>
<p>这也算是一种重生]]>
    </summary>
    
      <category term="随笔" scheme="http://1mhz.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="随笔" scheme="http://1mhz.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
